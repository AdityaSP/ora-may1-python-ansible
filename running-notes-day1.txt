Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:05:16) [MSC v.1915 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> print("Hello World!")
Hello World!
>>> print "Hello World"
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Hello World")?
>>> print('Hello World!')
Hello World!
>>> print('''Hello World!''')
Hello World!
>>> print("""Hello World!""")
Hello World!
>>> print('''Somebody said ")
Hello World
"
''')
Somebody said ")
Hello World
"

>>> 
>>> a = 10
>>> b= 'Hello'
>>> c = True
>>> d = 34.5
>>> print(a)
10
>>> print(a,b,c,d)
10 Hello True 34.5
>>> a
10
>>> a,b,c,d
(10, 'Hello', True, 34.5)
>>> type(a)
<class 'int'>
>>> type(b), type(c), type(d)
(<class 'str'>, <class 'bool'>, <class 'float'>)
>>> c = b
>>> type(c)
<class 'str'>
>>> a
10
>>> a + 45
55
>>> a - 34
-24
>>> a * 2
20
>>> a ** 10
10000000000
>>> a = 3
>>> b = 4
>>> a/b
0.75
>>> if a/b == 0:
	print("Launch Rocket")


-------------------------------------------------------------------------------------------------------
Strings
-------------------------------------------------------------------------------------------------------
>>> s = 'Hello World'
>>> len(s)
11
>>> s[0]
'H'
>>> s[9]
'l'
>>> s[10]
'd'
>>> s[11]
Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    s[11]
IndexError: string index out of range
>>> s[-1]
'd'
>>> s
'Hello World'
>>> s[-1]
'd'
>>> s[-11]
'H'
>>> s[-12]
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    s[-12]
IndexError: string index out of range
>>> s
'Hello World'
>>> s[0:4]
'Hell'
>>> s[0:5]
'Hello'
>>> s[:5]
'Hello'
>>> s[7:100]
'orld'
>>> s[7:]
'orld'
>>> s[:]
'Hello World'
>>> #s[<start>:<end>:<stepper>]
>>> s[0:30:1]
'Hello World'
>>> s[0:30:2]
'HloWrd'
>>> s[::]
'Hello World'
>>> s[::-1]
'dlroW olleH'
>>> 
>>> 
>>> 
>>> s
'Hello World'
>>> s + " Again"
'Hello World Again'
>>> s
'Hello World'
>>> s1 = s + ' Again'
>>> s1
'Hello World Again'
>>> s
'Hello World'
>>> a
3
>>> a + 5
8
>>> a
3
>>> c = a + 5
>>> s
'Hello World'
>>> s + 5
Traceback (most recent call last):
  File "<pyshell#72>", line 1, in <module>
    s + 5
TypeError: can only concatenate str (not "int") to str
>>> age = 20
>>> s = 'My age is '
>>> s + age
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    s + age
TypeError: can only concatenate str (not "int") to str
>>> s + str(age)
'My age is 20'
>>> s = 'Hello'
>>> s * 5
'HelloHelloHelloHelloHello'
>>> print('-' * 50)
--------------------------------------------------
>>> 

-------------------------------------------------------------------------------------
Lists
-------------------------------------------------------------------------------------
>>> s
'Hello'
>>> li = ['India', 'USA','China','Japan']
>>> len(li)
4
>>> li[0]
'India'
>>> li[3]
'Japan'
>>> li[4]
Traceback (most recent call last):
  File "<pyshell#89>", line 1, in <module>
    li[4]
IndexError: list index out of range
>>> li[-4]
'India'
>>> li[-5]
Traceback (most recent call last):
  File "<pyshell#91>", line 1, in <module>
    li[-5]
IndexError: list index out of range
>>> li
['India', 'USA', 'China', 'Japan']
>>> li[:3]
['India', 'USA', 'China']
>>> li[2:]
['China', 'Japan']
>>> li[::-1]
['Japan', 'China', 'USA', 'India']
>>> s = 'Hello'
>>> id(s)
51086688
>>> s = s + ' Again'
>>> s
'Hello Again'
>>> id(s)
51140992
>>> li
['India', 'USA', 'China', 'Japan']
>>> id(li)
42795736
>>> li[3]='JPN'
>>> li
['India', 'USA', 'China', 'JPN']
>>> id(li)
42795736
>>> li.append('Mexico')
>>> li
['India', 'USA', 'China', 'JPN', 'Mexico']
>>> len(li)
5
>>> id(li)
42795736
>>> l2 = ['Brazil','Canada']
>>> li.extend(l2)
>>> li
['India', 'USA', 'China', 'JPN', 'Mexico', 'Brazil', 'Canada']
>>> len(li)
7
>>> li.insert(2, 'UK')
>>> li
['India', 'USA', 'UK', 'China', 'JPN', 'Mexico', 'Brazil', 'Canada']
>>> li.insert(-1, 'Cuba')
>>> li
['India', 'USA', 'UK', 'China', 'JPN', 'Mexico', 'Brazil', 'Cuba', 'Canada']
>>> 
>>> 
>>> 
>>> li.remove('JPN')
>>> li
['India', 'USA', 'UK', 'China', 'Mexico', 'Brazil', 'Cuba', 'Canada']
>>> a
3
>>> del a
>>> a
Traceback (most recent call last):
  File "<pyshell#125>", line 1, in <module>
    a
NameError: name 'a' is not defined
>>> del li[-3]
>>> li
['India', 'USA', 'UK', 'China', 'Mexico', 'Cuba', 'Canada']
>>> li.pop()
'Canada'
>>> li
['India', 'USA', 'UK', 'China', 'Mexico', 'Cuba']
>>> x = li.pop()
>>> li
['India', 'USA', 'UK', 'China', 'Mexico']
>>> x
'Cuba'
>>> li.pop(2)
'UK'
>>> li
['India', 'USA', 'China', 'Mexico']
>>> 
>>> 
>>> s = '169:120:45:67'
>>> s = '169.120.45.67'
>>> type(s)
<class 'str'>
>>> li=s.split('.')
>>> li
['169', '120', '45', '67']
>>> li[-1]
'67'
>>> li[-1] + 1
Traceback (most recent call last):
  File "<pyshell#143>", line 1, in <module>
    li[-1] + 1
TypeError: can only concatenate str (not "int") to str
>>> int(li[-1]) + 1
68
>>> o4 = int(li[-1]) + 1
>>> type(o4)
<class 'int'>
>>> li[-1] = str(o4)
>>> li
['169', '120', '45', '68']
>>> next_ip = '.'.join(li)
>>> next_ip
'169.120.45.68'
>>> type(next_ip)
<class 'str'>
>>> s
'169.120.45.67'
>>> s
'169.120.45.67'
>>> li = s.split('.')
>>> li[-1] = str(int(li[-1]) +1)
>>> li
['169', '120', '45', '68']
>>> next_ip = '.'.join(li)
>>> next_ip
'169.120.45.68'
>>> 
------------------------------------------------------------------------------------------
Control structures
------------------------------------------------------------------------------------------
>>> a = 5
>>> if a < 10:
	print("Single digit")

	
Single digit
>>> a < 10
True
>>> a = 15
>>> if a < 10:
	print("Single digit")

	
>>> a < 10
False
>>> if a < 10:
	print("Single digit")
else:
	print("May be double digit")

	
May be double digit
>>> if a < 10:
	print("Single digit")
elif a < 100:
	print("2 digits")
else:
	print("2 + digits")

	
2 digits
>>> x = 3
>>> y = 7
>>> x > 2 and x < y
True
>>> x < 3 or x < y
True
>>> 2 < x < 10
True
>>> 2 < x < y < 10
True
>>> import random
>>> random.randint(0,100)
44
>>> random.randint(0,100)
56
>>> 
>>> 
>>> 
>>> li
['169', '120', '45', '68']
>>> li = ['USD', 'BP', 'INR']
>>> count = 0
>>> while count < len(li):
	print(li[count])
	count = count + 1

	
USD
BP
INR
>>> while count < len(li):
	print(li[count])
	count = count + 1

	
>>> count = 0
>>> while count < len(li):
	print(li[count])
	count = count + 1

	
USD
BP
INR
>>> for cur in li:
	print(cur)

	
USD
BP
INR
>>> for cur in li:
	print(cur)

	
USD
BP
INR
>>> 

>>> False, 0, '', [], {}, None
(False, 0, '', [], {}, None)
>>> s = ''
>>> if s == '':
	print("String is empty")

	
String is empty
>>> if not s:
	print("String is empty")

	
String is empty
>>> li
['USD', 'BP', 'INR']
>>> s
''
>>> s = 'Hello World'
>>> 'BP' in li
True
>>> 'World' in s
True
---------------------------------------------------------------------------------------------
Functions
---------------------------------------------------------------------------------------------
>>> def sayhi():
	print("Hi")

	
>>> sayhi()
Hi
>>> def sayhi(name):
	print("Hi", name)

	
>>> sayhi()
Traceback (most recent call last):
  File "<pyshell#244>", line 1, in <module>
    sayhi()
TypeError: sayhi() missing 1 required positional argument: 'name'
>>> sayhi("Aditya")
Hi Aditya
>>> def add(x, y):
	print(x + y)

	
>>> add(9,20)
29
>>> c = add(9,20)
29
>>> c
>>> def add(x, y):
	return x + y

>>> c = add(9,20)
>>> c + 10
39
>>> add(add(9,20),30)
59
>>> def full_name(fn , ln, title):
	return title + "." + fn + " " + ln

>>> full_name('Mark', 'Twain', 'Mr')
'Mr.Mark Twain'
>>> def full_name(fn , ln, title='Mr'):
	return title + "." + fn + " " + ln

>>> full_name('Mark', 'Twain')
'Mr.Mark Twain'
>>> 
>>> 
>>> full_name('Aditya', 'Prabhakara', 'Dr')
'Dr.Aditya Prabhakara'
>>> full_name(fn='Aditya', ln='Prabhakara', title='Dr')
'Dr.Aditya Prabhakara'
>>> # calling a function through positional arguments
>>> full_name('Aditya', 'Prabhakara', 'Dr')
'Dr.Aditya Prabhakara'
>>> # calling a function through key-word based arguments
>>> full_name(fn='Aditya', ln='Prabhakara', title='Dr')
'Dr.Aditya Prabhakara'
>>> full_name(title='Dr', ln='Prabhakara', fn='Aditya' )
'Dr.Aditya Prabhakara'
>>> full_name('Dr', 'Prabhakara', 'Aditya' )
'Aditya.Dr Prabhakara'
>>> full_name(ln='Prabhakara', fn='Aditya' )
'Mr.Aditya Prabhakara'
>>> li
['USD', 'BP', 'INR']
>>> sorted(li)
['BP', 'INR', 'USD']
>>> sorted(li, reverse=True)
['USD', 'INR', 'BP']
>>> 
>>> 
>>> len.__doc__
'Return the number of items in a container.'
>>> type.__doc__
"type(object_or_name, bases, dict)\ntype(object) -> the object's type\ntype(name, bases, dict) -> a new type"
>>> sayhi.__doc__
>>> def sayhi(name):
	'sayhi(name)--> prints a cheerful message on the console'
	print("Hi", name)

	
>>> sayhi.__doc__
'sayhi(name)--> prints a cheerful message on the console'
>>> help(len)
Help on built-in function len in module builtins:

len(obj, /)
    Return the number of items in a container.

>>> help(sayhi)
Help on function sayhi in module __main__:

sayhi(name)
    sayhi(name)--> prints a cheerful message on the console

>>> sorted.__doc__
'Return a new list containing all items from the iterable in ascending order.\n\nA custom key function can be supplied to customize the sort order, and the\nreverse flag can be set to request the result in descending order.'
>>> help(sorted)
Help on built-in function sorted in module builtins:

sorted(iterable, /, *, key=None, reverse=False)
    Return a new list containing all items from the iterable in ascending order.
    
    A custom key function can be supplied to customize the sort order, and the
    reverse flag can be set to request the result in descending order.

>>> 

--------------------------------------------------------------------------------------------
Dictionary
--------------------------------------------------------------------------------------------
>>> a_d = { "name": "Aditya", "email":"sp.aditya@gmail.com"}
>>> len(a_d)
2
>>> a_d['name']
'Aditya'
>>> a_d['email']
'sp.aditya@gmail.com'
>>> a_d['city']
Traceback (most recent call last):
  File "<pyshell#300>", line 1, in <module>
    a_d['city']
KeyError: 'city'
>>> a_d['city'] = 'Bangalore'
>>> a_d
{'name': 'Aditya', 'email': 'sp.aditya@gmail.com', 'city': 'Bangalore'}
>>> a_d['city']
'Bangalore'
>>> a_d['city'] = 'London'
>>> a_d
{'name': 'Aditya', 'email': 'sp.aditya@gmail.com', 'city': 'London'}
>>> a_d['phone'] = ['12038002813', '19208301']
>>> a_d
{'name': 'Aditya', 'email': 'sp.aditya@gmail.com', 'city': 'London', 'phone': ['12038002813', '19208301']}
>>> a_d['phone'][-1]
'19208301'
>>> a_d['address'] = {'home': 'aldskjf lasjfow', 'work': 'asdljfow osjdf'}
>>> a_d
{'name': 'Aditya', 'email': 'sp.aditya@gmail.com', 'city': 'London', 'phone': ['12038002813', '19208301'], 'address': {'home': 'aldskjf lasjfow', 'work': 'asdljfow osjdf'}}
>>> a_d['address']['work']
'asdljfow osjdf'
>>> data = {"Search":[{"Title":"Batman Begins","Year":"2005","imdbID":"tt0372784","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BZmUwNGU2ZmItMmRiNC00MjhlLTg5YWUtODMyNzkxODYzMmZlXkEyXkFqcGdeQXVyNTIzOTk5ODM@._V1_SX300.jpg"},{"Title":"Batman v Superman: Dawn of Justice","Year":"2016","imdbID":"tt2975590","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BYThjYzcyYzItNTVjNy00NDk0LTgwMWQtYjMwNmNlNWJhMzMyXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg"},{"Title":"Batman","Year":"1989","imdbID":"tt0096895","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BMTYwNjAyODIyMF5BMl5BanBnXkFtZTYwNDMwMDk2._V1_SX300.jpg"},{"Title":"Batman Returns","Year":"1992","imdbID":"tt0103776","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BOGZmYzVkMmItM2NiOS00MDI3LWI4ZWQtMTg0YWZkODRkMmViXkEyXkFqcGdeQXVyODY0NzcxNw@@._V1_SX300.jpg"},{"Title":"Batman Forever","Year":"1995","imdbID":"tt0112462","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BNWY3M2I0YzItNzA1ZS00MzE3LThlYTEtMTg2YjNiOTYzODQ1XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg"},{"Title":"Batman & Robin","Year":"1997","imdbID":"tt0118688","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BMGQ5YTM1NmMtYmIxYy00N2VmLWJhZTYtN2EwYTY3MWFhOTczXkEyXkFqcGdeQXVyNTA2NTI0MTY@._V1_SX300.jpg"},{"Title":"The Lego Batman Movie","Year":"2017","imdbID":"tt4116284","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BMTcyNTEyOTY0M15BMl5BanBnXkFtZTgwOTAyNzU3MDI@._V1_SX300.jpg"},{"Title":"Batman: The Animated Series","Year":"1992–1995","imdbID":"tt0103359","Type":"series","Poster":"https://m.media-amazon.com/images/M/MV5BOTM3MTRkZjQtYjBkMy00YWE1LTkxOTQtNDQyNGY0YjYzNzAzXkEyXkFqcGdeQXVyOTgwMzk1MTA@._V1_SX300.jpg"},{"Title":"Batman: Under the Red Hood","Year":"2010","imdbID":"tt1569923","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BYTdlODI0YTYtNjk5ZS00YzZjLTllZjktYmYzNWM4NmI5MmMxXkEyXkFqcGdeQXVyNTA4NzY1MzY@._V1_SX300.jpg"},{"Title":"Batman: The Dark Knight Returns, Part 1","Year":"2012","imdbID":"tt2313197","Type":"movie","Poster":"https://m.media-amazon.com/images/M/MV5BMzIxMDkxNDM2M15BMl5BanBnXkFtZTcwMDA5ODY1OQ@@._V1_SX300.jpg"}],"totalResults":"363","Response":"True"}
>>> type(data)
<class 'dict'>
>>> data.keys()
dict_keys(['Search', 'totalResults', 'Response'])
>>> type(data['Search'])
<class 'list'>
>>> len(data['Search'])
10
>>> type(data['Search'][0])
<class 'dict'>
>>> data['Search'][0].keys()
dict_keys(['Title', 'Year', 'imdbID', 'Type', 'Poster'])
>>> data['Search'][0]['Title']
'Batman Begins'
>>> for movie in data['Search']:
	print(movie['Title'], "is a ", movie['Type'])

	
Batman Begins is a  movie
Batman v Superman: Dawn of Justice is a  movie
Batman is a  movie
Batman Returns is a  movie
Batman Forever is a  movie
Batman & Robin is a  movie
The Lego Batman Movie is a  movie
Batman: The Animated Series is a  series
Batman: Under the Red Hood is a  movie
Batman: The Dark Knight Returns, Part 1 is a  movie
>>> #JSON - Java Script Object Notation
>>> 
>>> 
>>> 
>>> 
----------------------------------------------------------------------------------------------
Working with files
----------------------------------------------------------------------------------------------
>>> #1. write to files
>>> fp = 'D:/training/Python/oracle/may1/f1.txt'
>>> fp
'D:/training/Python/oracle/may1/f1.txt'
>>> fp = 'D:\\training\\Python\\oracle\\may1\\f1.txt'
>>> fp = r'D:\training\Python\oracle\may1\f1.txt'
>>> fh = open(fp, 'wt')
>>> fh.write('write some content')
18
>>> fh.close()
>>> fh.write('write some content')
Traceback (most recent call last):
  File "<pyshell#336>", line 1, in <module>
    fh.write('write some content')
ValueError: I/O operation on closed file.
>>> fh = open(fp, 'at')
>>> fh.write('write some more content')
23
>>> fh.close()
>>> 
>>> # Read the whole content of the file
>>> fh = open(fp,'rt')
>>> s = fh.read()
>>> print(s)
line1
line2
line3
>>> s1 = fh.read()
>>> print(s1)

>>> fh.seek(0)
0
>>> s1 = fh.read()
>>> print(s1)
line1
line2
line3
>>> fh.seek(0)
0
>>> li = fh.readlines()
>>> print(li)
['line1\n', 'line2\n', 'line3']
>>> fh.seek(0)
0
>>> for line in fh:
	print(line)

	
line1

line2

line3
>>> fh.close()
>>> for line in fh:
	print(line.strip())

	
Traceback (most recent call last):
  File "<pyshell#359>", line 1, in <module>
    for line in fh:
ValueError: I/O operation on closed file.
>>> fh = open(fp,'rt')
>>> for line in fh:
	print(line.strip())

	
line1
line2
line3
>>> for line in fh:
	print(line,end=None)

	
>>> fh.seek(0)
0
>>> for line in fh:
	print(line,end=None)

	
line1

line2

line3
>>> for line in fh:
	print(line,end='')

	
>>> fh.seek(0)
0
>>> for line in fh:
	print(line,end='')

	
line1
line2
line3
